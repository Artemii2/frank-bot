import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from states import *
from keyboards import *
from config import OWNER_CHAT_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    user_data[user.id] = {}
    
    welcome_text = (
        "üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω FRANK by BASTA!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏.\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç.\n\n"
        "–ù–∞—á–Ω–µ–º?"
    )
    
    await update.message.reply_text(
        text=welcome_text,
        reply_markup=create_start_keyboard()
    )
    return MAIN_MENU

async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞."""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        text="–í—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —É –Ω–∞—Å –≤ –≥–æ—Å—Ç—è—Ö?",
        reply_markup=create_yes_no_keyboard()
    )
    return FIRST_VISIT

async def handle_first_visit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –ø–µ—Ä–≤–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {}
    
    is_first_visit = query.data == "answer_yes"
    user_data[user_id]["first_visit"] = "–î–∞" if is_first_visit else "–ù–µ—Ç"
    
    await query.edit_message_text(
        text="–ö–∞–∫ –≤–∞–º –Ω–∞—à–∏ –±–ª—é–¥–∞?",
        reply_markup=create_rating_keyboard()
    )
    return FOOD_RATING

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {}
    
    rating = int(query.data.split("_")[1])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–ª–µ–¥—É—é—â–µ–µ
    current_state = context.user_data.get("current_state", FOOD_RATING)
    if current_state == FOOD_RATING:
        user_data[user_id]["food_rating"] = rating
        next_state = SERVICE_RATING
        next_question = "–Ω–∞—à —Å–µ—Ä–≤–∏—Å"
    elif current_state == SERVICE_RATING:
        user_data[user_id]["service_rating"] = rating
        next_state = ATMOSPHERE_RATING
        next_question = "–æ–±—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É"
    else:
        user_data[user_id]["atmosphere_rating"] = rating
        next_state = WILL_VISIT_AGAIN
        next_question = "–ø–æ—Å–µ—Ç–∏—Ç–µ –ª–∏ –≤—ã –Ω–∞—Å –µ—â–µ —Ä–∞–∑"
    
    context.user_data["current_state"] = next_state
    
    if next_state == WILL_VISIT_AGAIN:
        await query.edit_message_text(
            text="–ü–æ—Å–µ—Ç–∏—Ç–µ –ª–∏ –≤—ã –Ω–∞—Å –µ—â–µ —Ä–∞–∑?",
            reply_markup=create_yes_no_keyboard()
        )
    else:
        await query.edit_message_text(
            text=f"–ö–∞–∫ –≤–∞–º {next_question}?",
            reply_markup=create_rating_keyboard()
        )
    
    return next_state

async def handle_will_visit_again(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {}
    
    will_visit = query.data == "answer_yes"
    user_data[user_id]["will_visit_again"] = "–î–∞" if will_visit else "–ù–µ—Ç"
    
    await query.edit_message_text(
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ:"
    )
    return TEXT_REVIEW

async def handle_text_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
    user_id = update.effective_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {}
    
    user_data[user_id]["text_review"] = update.message.text
    
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)?\n"
        "–≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'."
    )
    return CONTACT_INFO

async def handle_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    user_id = update.effective_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {}
    
    contact = update.message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    user_data[user_id]["contact_info"] = contact if contact.lower() != "–Ω–µ—Ç" else "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    review = user_data[user_id]
    confirmation_text = (
        "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:\n\n"
        f"üë• –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {review['first_visit']}\n"
        f"üç¥ –û—Ü–µ–Ω–∫–∞ –±–ª—é–¥: {review['food_rating']}/5\n"
        f"üë®‚Äçüç≥ –û—Ü–µ–Ω–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {review['service_rating']}/5\n"
        f"üé≠ –û—Ü–µ–Ω–∫–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã: {review['atmosphere_rating']}/5\n"
        f"üîÑ –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞: {review['will_visit_again']}\n"
        f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤: {review['text_review']}\n"
        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {review['contact_info']}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    await update.message.reply_text(
        text=confirmation_text,
        reply_markup=create_confirmation_keyboard()
    )
    return CONFIRMATION

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "confirm_yes":
            user = query.from_user
            review = user_data[user.id]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
            owner_message = (
                "üì© –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ:\n\n"
                f"üë§ –û—Ç: {user.first_name} {user.last_name or ''} (@{user.username or '–Ω–µ—Ç'})\n"
                f"üÜî ID: {user.id}\n"
                f"üë• –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {review['first_visit']}\n"
                f"üç¥ –û—Ü–µ–Ω–∫–∞ –±–ª—é–¥: {review['food_rating']}/5\n"
                f"üë®‚Äçüç≥ –û—Ü–µ–Ω–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {review['service_rating']}/5\n"
                f"üé≠ –û—Ü–µ–Ω–∫–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã: {review['atmosphere_rating']}/5\n"
                f"üîÑ –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞: {review['will_visit_again']}\n"
                f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n{review['text_review']}\n"
                f"üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {review['contact_info']}"
            )
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ –≥—Ä—É–ø–ø—É
                logger.info(f"Attempting to send message to group {OWNER_CHAT_ID}")
                await context.bot.send_message(
                    chat_id=OWNER_CHAT_ID,
                    text=owner_message,
                    parse_mode='HTML'
                )
                logger.info("Message successfully sent to group")
                
                await query.edit_message_text(
                    text="üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –≤ –≥—Ä—É–ø–ø—É: {str(e)}")
                logger.error(f"ID –≥—Ä—É–ø–ø—ã: {OWNER_CHAT_ID}")
                await query.edit_message_text(
                    text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if query.from_user.id in user_data:
                del user_data[query.from_user.id]
            if "current_state" in context.user_data:
                del context.user_data["current_state"]
            
            # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ
            await query.edit_message_text(
                text="–í—ã –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —É –Ω–∞—Å –≤ –≥–æ—Å—Ç—è—Ö?",
                reply_markup=create_yes_no_keyboard()
            )
            return FIRST_VISIT
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if query.from_user.id in user_data:
            del user_data[query.from_user.id]
        if "current_state" in context.user_data:
            del context.user_data["current_state"]
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirmation: {str(e)}")
        await query.edit_message_text(
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start"
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø—Ä–æ—Å–∞."""
    user = update.effective_user
    if user.id in user_data:
        del user_data[user.id]
    if "current_state" in context.user_data:
        del context.user_data["current_state"]
    
    await update.message.reply_text(
        "–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    return ConversationHandler.END 