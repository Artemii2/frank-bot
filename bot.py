# import logging
# from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
# from telegram.ext import (
#     Application,
#     CommandHandler,
#     MessageHandler,
#     filters,
#     CallbackQueryHandler,
#     ContextTypes,
#     ConversationHandler,
# )
# import asyncio
# import telegram

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
#     level=logging.INFO
# )
# logger = logging.getLogger(__name__)

# # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# OWNER_CHAT_ID = "575503615"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
# BOT_TOKEN = "7549779158:AAHdDwo1AhMmLz7Oyj0-xKdpAKMxji7pojQ"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
# (
#     MAIN_MENU,
#     FOOD_RATING,
#     SERVICE_RATING,
#     ATMOSPHERE_RATING,
#     TEXT_REVIEW,
#     CONTACT_INFO,
#     CONFIRMATION,
# ) = range(7)

# # –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# user_data = {}

# def create_rating_keyboard():
#     """–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ."""
#     buttons = [[InlineKeyboardButton(str(i), callback_data=f"rate_{i}")] 
#         for i in range(1, 6)
#     ]
#     return InlineKeyboardMarkup(buttons)

# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."""
#     try:
#         user = update.message.from_user
#         logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å.")
        
#         # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         user_data[user.id] = {}

#         welcome_text = (
#             "üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω FRANK by BASTA!\n\n"
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –ø–æ—Å–µ—â–µ–Ω–∏–∏.\n"
#             "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç.\n\n"
#             "–ù–∞—á–Ω–µ–º?"
#         )
        
#         keyboard = InlineKeyboardMarkup([
#             [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="start_survey")]
#         ])
        
#         await update.message.reply_text(
#             text=welcome_text,
#             reply_markup=keyboard
#         )
#         return MAIN_MENU
        
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)
#         await update.message.reply_text(
#             "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
#         )
#         return -1

# async def start_survey(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞."""
#     query = update.callback_query
#     await query.answer()
    
#     try:
#         await asyncio.sleep(0.3)
        
#         # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏
#         keyboard = create_rating_keyboard()
        
#         await query.edit_message_text(
#             text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –±–ª—é–¥:",
#             reply_markup=keyboard
#         )
#         return FOOD_RATING
        
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ start_survey: {e}", exc_info=True)
#         await query.edit_message_text(
#             "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start"
#         )
#         return -1

# async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫."""
#     query = update.callback_query
#     await query.answer()
    
#     user_id = query.from_user.id
#     rating = int(query.data.split("_")[1])
    
#     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–ª–µ–¥—É—é—â–µ–µ
#     current_state = context.user_data.get("current_state", FOOD_RATING)
#     if current_state == FOOD_RATING:
#         user_data[user_id]["food_rating"] = rating
#         next_state = SERVICE_RATING
#         next_question = "–∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
#     elif current_state == SERVICE_RATING:
#         user_data[user_id]["service_rating"] = rating
#         next_state = ATMOSPHERE_RATING
#         next_question = "–∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞"
#     else:
#         user_data[user_id]["atmosphere_rating"] = rating
#         next_state = TEXT_REVIEW
#         next_question = "–Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤"
    
#     context.user_data["current_state"] = next_state
    
#     if next_state == TEXT_REVIEW:
#         await query.edit_message_text(
#             text="–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:"
#         )
#     else:
#         await query.edit_message_text(
#             text=f"–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏—Ç–µ {next_question}:",
#             reply_markup=create_rating_keyboard()
#         )
    
#     return next_state

# async def handle_text_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞."""
#     try:
#         user = update.message.from_user
#         user_data[user.id]["text_review"] = update.message.text
        
#         await update.message.reply_text(
#             "üìù –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email)?\n"
#             "–≠—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ –∏—Ö –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç'."
#         )
#         return CONTACT_INFO
        
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ text_review: {e}", exc_info=True)
#         await update.message.reply_text(
#             "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
#         )
#         return TEXT_REVIEW

# async def handle_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
#     try:
#         user = update.message.from_user
#         contact = update.message.text if update.message.text.lower() != "–Ω–µ—Ç" else "–Ω–µ —É–∫–∞–∑–∞–Ω—ã"
#         user_data[user.id]["contact_info"] = contact
        
#         # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
#         review_data = user_data[user.id]
#         confirmation_text = (
#             "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:\n\n"
#             f"üç¥ –û—Ü–µ–Ω–∫–∞ –±–ª—é–¥: {review_data['food_rating']}/5\n"
#             f"üë®‚Äçüç≥ –û—Ü–µ–Ω–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {review_data['service_rating']}/5\n"
#             f"üé≠ –û—Ü–µ–Ω–∫–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã: {review_data['atmosphere_rating']}/5\n"
#             f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤: {review_data['text_review']}\n"
#             f"üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {review_data.get('contact_info', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n\n"
#             "–í—Å–µ –≤–µ—Ä–Ω–æ?"
#         )
        
#         keyboard = InlineKeyboardMarkup([
#             [InlineKeyboardButton("–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_yes")],
#             [InlineKeyboardButton("–ù–µ—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="confirm_no")]
#         ])
        
#         await update.message.reply_text(
#             text=confirmation_text,
#             reply_markup=keyboard
#         )
#         return CONFIRMATION
        
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ contact_info: {e}", exc_info=True)
#         await update.message.reply_text(
#             "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
#         )
#         return CONTACT_INFO

# async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
#     query = update.callback_query
#     await query.answer()
    
#     try:
#         if query.data == "confirm_yes":
#             user = query.from_user
#             review = user_data[user.id]
            
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
#             owner_message = (
#                 "üì© –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ:\n\n"
#                 f"üë§ –û—Ç: {user.first_name} {user.last_name or ''} (@{user.username or '–Ω–µ—Ç'})\n"
#                 f"üÜî ID: {user.id}\n"
#                 f"üç¥ –û—Ü–µ–Ω–∫–∞ –±–ª—é–¥: {review['food_rating']}/5\n"
#                 f"üë®‚Äçüç≥ –û—Ü–µ–Ω–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {review['service_rating']}/5\n"
#                 f"üé≠ –û—Ü–µ–Ω–∫–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã: {review['atmosphere_rating']}/5\n"
#                 f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n{review['text_review']}\n"
#                 f"üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {review['contact_info']}"
#             )
            
#             try:
#                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤–ª–∞–¥–µ–ª—å—Ü—É
#                 await context.bot.send_message(
#                     chat_id=OWNER_CHAT_ID,
#                     text=owner_message
#                 )
                
#                 await query.edit_message_text(
#                     text="üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!"
#                 )
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
#                 await query.edit_message_text(
#                     text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
#                 )
#         else:
#             await query.edit_message_text(
#                 text="üîÅ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ /start"
#             )
        
#         # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         if user.id in user_data:
#             del user_data[user.id]
#         if "current_state" in context.user_data:
#             del context.user_data["current_state"]
        
#         return ConversationHandler.END
        
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirmation: {e}")
#         await query.edit_message_text(
#             text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start"
#         )
#         return ConversationHandler.END

# async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """–û—Ç–º–µ–Ω–∞ –æ–ø—Ä–æ—Å–∞."""
#     user = update.effective_user
#     if user.id in user_data:
#         del user_data[user.id]
#     if "current_state" in context.user_data:
#         del context.user_data["current_state"]
    
#     await update.message.reply_text(
#         "–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start"
#     )
#     return -1

# async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
#     error = context.error
#     logger.error("–û—à–∏–±–∫–∞: %s", error, exc_info=True)
    
#     # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Message is not modified"
#     if isinstance(error, telegram.error.BadRequest) and "Message is not modified" in str(error):
#         return
    
#     if update and isinstance(update, Update):
#         if update.callback_query:
#             await update.callback_query.message.reply_text(
#                 "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start"
#             )
#         elif update.message:
#             await update.message.reply_text(
#                 "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
#             )

# def main() -> None:
#     """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
#     application = Application.builder().token(BOT_TOKEN).build()
    
#     # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
#     conv_handler = ConversationHandler(
#         entry_points=[CommandHandler("start", start)],
#         states={
#             MAIN_MENU: [
#                 CallbackQueryHandler(start_survey, pattern="^start_survey$")
#             ],
#             FOOD_RATING: [
#                 CallbackQueryHandler(handle_rating, pattern="^rate_[1-5]$")
#             ],
#             SERVICE_RATING: [
#                 CallbackQueryHandler(handle_rating, pattern="^rate_[1-5]$")
#             ],
#             ATMOSPHERE_RATING: [
#                 CallbackQueryHandler(handle_rating, pattern="^rate_[1-5]$")
#             ],
#             TEXT_REVIEW: [
#                 MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_review)
#             ],
#             CONTACT_INFO: [
#                 MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact_info)
#             ],
#             CONFIRMATION: [
#                 CallbackQueryHandler(handle_confirmation, pattern="^confirm_(yes|no)$")
#             ],
#         },
#         fallbacks=[CommandHandler("cancel", cancel)],
#     )
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
#     application.add_handler(conv_handler)
    
#     # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
#     application.add_error_handler(error_handler)
    
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
#     application.run_polling()

# if __name__ == "__main__":
#     main()